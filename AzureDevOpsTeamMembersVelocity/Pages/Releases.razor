@page "/Releases"
@inject ReleasesService ReleasesService
@inject IUserPreferenceRepository UserPreference
@inject IDialogService DialogService

<div class="row">
    <h3>Releases</h3>
</div>

<div class="row">
    <div class="col-3">
        <h4>Releases definition</h4>
        <div @onclick="OpenFilterModal">
            Advenced search 
        </div>
        <ul class="list-group">
            @if (DefinitionList != null)
            {
                foreach (var defintion in DefinitionList)
                {
                    <li class="list-group-item">@defintion.Name</li>
                }

                if (DefinitionList.Count == 0)
                {
                    <li class="list-group-item list-group-item-info">You don't have any definition yet</li>
                }
            }
        </ul>
    </div>

    <div class="col-3">
        <h4>Releases list</h4>
        <ul class="list-group">
            @if (ReleasesList != null)
            {
                foreach (var release in ReleasesList)
                {
                    <li class="list-group-item">@release.Name</li>
                }

                if (ReleasesList.Count == 0)
                {
                    <li class="list-group-item list-group-item-info">You don't have any release yet</li>
                }
            }
        </ul>
    </div>
</div>


@code {
    List<Release>? ReleasesList { get; set; }

    List<ReleaseDefinition>? DefinitionList { get; set; }

    ListDefinitionFilter ListDefinitionFilter { get; set; } = new ListDefinitionFilter();

    protected override async Task OnInitializedAsync()
    {
        var settings = await UserPreference.GetAsync<TeamMembersVelocitySettings>();

        if (settings.Organisation != null && settings.TeamProject != null)
        {
            ListDefinitionFilter = await UserPreference.GetAsync<ListDefinitionFilter>();

            DefinitionList = (await ReleasesService.ListDefinition(settings.Organisation, settings.TeamProject, ListDefinitionFilter)).Item1?.Value;

            ReleasesList = (await ReleasesService.ListReleases(settings.Organisation, settings.TeamProject)).Item1?.Value;
        }
    }

    public async Task OpenFilterModal()
    {
        var parameters = new DialogParameters();

        parameters.Add("T", ListDefinitionFilter.GetType());
        parameters.Add("Value", ListDefinitionFilter);

        DialogService.Show<AdvancedSearchDialog>("Advanved search", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge
        });

        await Task.CompletedTask;
    }
}
