@page "/Git"
@inject GitService GitService
@inject IUserPreferenceRepository UserPreference
@inject TokenProvider TokenProvider
@attribute [Authorize]

@if (Error != null)
{
    <ul class="list-group mb-3">
        <li class="list-group-item list-group-item-danger">@Error</li>
    </ul>
}

<div class="row">
    <div class="col-md-6">
        <h3>Git</h3>
    </div>
</div>

<div class="row border mb-3">
    @if (EditContext != null)
    {
        <EditForm class="m-2 col-md-12" EditContext="EditContext">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <div class="form-row">
                    <div class="form-group col-md-4">
                        <label for="inputTeamProject">Repository</label>
                        <InputSelect ValueExpression="() => GitSettings.Repository"
                                     ValueChanged="async (string repositoryName) => await UpdateRepositoryAndGetPullRequests(repositoryName)"
                                     class="form-control">
                            <option value="">Select repository...</option>
                            @if (Repositories != null)
                            {
                                @foreach (var repo in Repositories)
                                {
                                    if (repo.Name == GitSettings.Repository)
                                    {
                                        <option value="@repo.Name" selected="selected">@repo.Name</option>
                                    }
                                    else
                                    {
                                        <option value="@repo.Name">@repo.Name</option>
                                    }
                                }
                            }
                        </InputSelect>
                    </div>

                    @if (string.IsNullOrWhiteSpace(GitSettings.Repository) == false)
                    {
                        <div class="form-group col-md-4">
                            <label for="inputTeamProject">Pull Request</label>
                            <InputSelect ValueExpression="() => GitSettings.PullRequest"
                                         ValueChanged="async (int? prId) => await GetPullRequest(prId)"
                                         class="form-control">
                                <option value="">Select a PR...</option>
                                @if (PullRequests != null)
                                {
                                    @foreach (var pr in PullRequests)
                                    {
                                        if (pr.PullRequestId == GitSettings.PullRequest)
                                        {
                                            <option value="@pr.PullRequestId" selected="selected">@pr.Title</option>
                                        }
                                        else
                                        {
                                            <option value="@pr.PullRequestId">@pr.Title</option>
                                        }
                                    }
                                }
                            </InputSelect>
                        </div>
                    }
                </div>
                <div class="form-row">
                    <input name="__RequestVerificationToken" type="hidden" value="@TokenProvider.XsrfToken">
                    <button class="btn btn-secondary mb-3">Search</button>
                </div>
            </div>
        </EditForm>
    }
</div>

<PullRequest PullRequestModel="PullRequest" />

@code {
    public string? Error { get; set; }

    public TeamMembersVelocitySettings Settings { get; set; } = new TeamMembersVelocitySettings();

    public GitPageSettings GitSettings { get; set; } = new GitPageSettings();

    public EditContext? EditContext { get; set; }

    public IEnumerable<GitRepository>? Repositories { get; set; }

    public GitRepository? Repository { get; set; }

    public IEnumerable<GitPullRequest>? PullRequests { get; set; }

    public GitPullRequest? PullRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Settings = await UserPreference.GetAsync<TeamMembersVelocitySettings>();
        GitSettings = await UserPreference.GetAsync<GitPageSettings>();

        EditContext = new EditContext(GitSettings);

        var (repositories, error) = (await GitService.GetRepositories());

        Repositories = repositories?.Value?.OrderBy(r => r.Name);
        Error = error;

        await GetPullRequests();
    }

    public async Task UpdateRepositoryAndGetPullRequests(string repositoryName)
    {
        GitSettings.Repository = repositoryName;

        await GetPullRequests();
    }

    public async Task GetPullRequests()
    {
        var selectedRepository = Repositories?.FirstOrDefault(r => r.Name == GitSettings.Repository);

        if (selectedRepository != null &&
            string.IsNullOrWhiteSpace(GitSettings.Repository) == false)
        {
            // Fetch full information of the repository
            var (repository, error) = (await GitService.GetRepository(selectedRepository.Url));

            Repository = repository;
            Error = error;

            if (Repository?.Links?.PullRequests?.Href != null)
            {
                var (pullRequests, errorPr) = (await GitService.GetPullRequests(Repository.Links.PullRequests.Href));

                PullRequests = pullRequests?.Value;
                Error = errorPr;

                if (GitSettings.PullRequest != null)
                {
                    await GetPullRequest(GitSettings.PullRequest);
                }
            }

            StateHasChanged();
        }
    }

    public async Task GetPullRequest(int? idPR)
    {
        var selectedPR = PullRequests?.FirstOrDefault(pr => pr.PullRequestId == idPR);

        if (selectedPR != null && idPR != default)
        {
            var (fullPR, error) = (await GitService.GetPullRequest(selectedPR.Url));

            PullRequest = fullPR;
            Error = error;

            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await UserPreference.SetAsync(GitSettings);
    }
}
