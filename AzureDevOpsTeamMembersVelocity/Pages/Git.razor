@page "/Git"
@inject GitService GitService
@inject IUserPreferenceRepository UserPreference
@inject TokenProvider TokenProvider
@attribute [Authorize]

@if (Error != null)
{
    <ul class="list-group mb-3">
        <li class="list-group-item list-group-item-danger">@Error</li>
    </ul>
}

<div class="row">
    <div class="col-md-6">
        <h3>Git</h3>
    </div>
</div>

<div class="row border mb-3">
    @if (EditContext != null)
    {
        <EditForm class="m-2 col-md-12" EditContext="EditContext">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <div class="form-row">
                    <MultiSelectList Label="Repository"
                                     HelperText="Select one or many repositories"
                                     Values="Repositories"
                                     SelectedValues="SelectedRepositories"
                                     PropertySelectedName="Name"
                                     PropertySelectedTitle="Name"
                                     OnSelectedValueChanged="async (set) => await UpdateRepositoryAndGetPullRequests(set)" />
                </div>
            </div>
        </EditForm>
    }
</div>

<MudTable Items="@PullRequests" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Creation date</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.PullRequestId</MudTd>
        <MudTd DataLabel="Sign">@context.Title</MudTd>
        <MudTd DataLabel="Name">@context.CreatedBy.DisplayName</MudTd>
        <MudTd DataLabel="Creation date">@context.CreationDate</MudTd>
        <MudTh>
            <a class="btn btn-primary" href="/PullRequest?pullrequest=@context.Url">PR</a>
        </MudTh>
    </RowTemplate>
</MudTable>

@code {
    public string? Error { get; set; }

    public TeamMembersVelocitySettings Settings { get; set; } = new TeamMembersVelocitySettings();

    public GitPageSettings GitSettings { get; set; } = new GitPageSettings();

    public HashSet<string>? SelectedRepositories { get; set; }

    public EditContext? EditContext { get; set; }

    public IEnumerable<GitRepository>? Repositories { get; set; }

    public GitRepository? Repository { get; set; }

    public List<Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest>? PullRequests { get; set; }

    public Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest? PullRequest { get; set; }

    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        Settings = await UserPreference.GetAsync<TeamMembersVelocitySettings>();
        GitSettings = await UserPreference.GetAsync<GitPageSettings>();

        SelectedRepositories = GitSettings.SelectedRepositories?.ToHashSet() ?? new HashSet<string>();

        // This property is obselete and must not be used anymore. It is used here 
        // to allow better transition to te new mechanisme. User will keep there
        // previous setting and after the first use there settings file are going
        // to use the collection of repostiory intead of the single repository.
        if (GitSettings.Repository != null && GitSettings.SelectedRepositories == null)
        {
            SelectedRepositories.Add(GitSettings.Repository);
        }

        EditContext = new EditContext(GitSettings);

        if (Settings.Organisation != null && Settings.TeamProject != null)
        {
            var (repositories, error) = (await GitService.GetRepositories(Settings.Organisation, Settings.TeamProject));

            Repositories = repositories?.Value?.OrderBy(r => r.Name);
            Error = error;

            await UpdateRepositoryAndGetPullRequests(
                GitSettings?.SelectedRepositories?.ToHashSet() ?? new HashSet<string>());
        }
    }

    public async Task UpdateRepositoryAndGetPullRequests(HashSet<string> repositoriesNames)
    {
        SelectedRepositories = repositoriesNames;

        GitSettings.SelectedRepositories = repositoriesNames;

        PullRequests?.Clear();

        if (PullRequests == null)
        {
            PullRequests = new List<Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest>();
        }

        foreach (var repo in GitSettings.SelectedRepositories)
        {
            await GetPullRequests(repo);
        }
    }

    public async Task GetPullRequests(string repoName)
    {
        var selectedRepository = Repositories?.FirstOrDefault(r => r.Name == repoName);

        if (selectedRepository != null)
        {
            // Fetch full information of the repository
            var (repository, error) = (await GitService.GetRepository(selectedRepository.Url));

            Repository = repository;
            Error = error;

            if (Repository?.Links?.PullRequests?.Href != null)
            {
                var (pullRequests, errorPr) = (await GitService.GetPullRequests(Repository.Links.PullRequests.Href));

                if (pullRequests?.Value?.Any() == true)
                {
                    if (PullRequests == null)
                    {
                        PullRequests = new List<Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest>();
                    }

                    PullRequests.AddRange(pullRequests.Value);
                }

                Error = errorPr;
            }

            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await UserPreference.SetAsync(GitSettings);
    }
}
