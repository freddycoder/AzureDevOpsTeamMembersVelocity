@page "/Kubernetes"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Http
@inject k8s.Kubernetes Client
@inject NavigationManager NavigationManager
@inject ILogger<KubernetesDashboard> Logger
@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize]

@if (Error != null)
{
    <ul class="list-group mb-3">
        <li class="list-group-item list-group-item-danger">@Error</li>
    </ul>
}

<h3>Kubernetes</h3>

<div class="row">
    <button class="btn btn-primary"
            type="button"
            @onclick='() => Collapsing("collapseNamespace")'>
        Namespaces
    </button>
</div>

@if (NamespaceList != null)
{
    <div class="@NamespaceCollapseClass" id="collapseNamespace">
        <table class="table table-hover table-responsive">
            <caption>Table of kubernetes namespace</caption>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Creation time</th>
                    <th>Phase</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var ns in NamespaceList.Items)
                {
                    <tr>
                        <td>@ns.Metadata.Name</td>
                        <td>@ns.Metadata.CreationTimestamp</td>
                        <td>@ns.Status.Phase</td>
                        <td>
                            <button id="@string.Concat("ns-", ns.Metadata.Name)"
                                    title="btn-delete-ns-@ns.Metadata.Name"
                                    class="btn btn-danger"
                                    @onclick="async (mea) => await DeleteNamespace(ns)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <hr />

    <div class="row">
        <button class="btn btn-primary"
                type="button"
                @onclick='() => Collapsing("collapseDeployment")'>
            Deployments
        </button>
    </div>

    <div class="@DeploymentCollapseClass" id="collapseDeployment">
        <table class="table table-hover table-responsive">
            <caption>Table of kubernetes deployments</caption>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Creation time</th>
                    <th>Ready</th>
                    <th>Unavailable</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Deployments != null && Deployments.Items != null)
                {
                    @foreach (var deployment in Deployments.Items)
                    {
                        var deploymentNamespace = deployment.Namespace();
                        var deploymentName = deployment.Name();

                        <tr>
                            <td>@deployment.Metadata.Name</td>
                            <td>@deployment.Metadata.CreationTimestamp</td>
                            <td>@deployment.Status.ReadyReplicas</td>
                            <td>@deployment.Status.UnavailableReplicas</td>
                            <td>
                                <input id="@string.Concat(deploymentNamespace, deploymentName)"
                                       title="button-pod-@deployment.Metadata.Name"
                                       type="checkbox"
                                       class="form-check"
                                       @onchange="async (changeEventArg) => await OnDeploymentLogClick(changeEventArg, deploymentNamespace, deploymentName)" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <hr />

    <div class="row">
        <button class="btn btn-primary"
                type="button"
                @onclick='() => Collapsing("collapsePods")'>
            Pods
        </button>
    </div>

    <div class="@PodsCollapseClass" id="collapsePods">
        <table class="table table-hover table-responsive">
            <caption>Table of kubernetes pods</caption>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Creation time</th>
                    <th>Phase</th>
                    <th>Reason</th>
                    <th>Select</th>
                </tr>
            </thead>
            <tbody>
                @if (Pods != null && Pods.Items != null)
                {
                    @foreach (var pod in Pods.Items)
                    {
                        var podNamespace = pod.Namespace();
                        var podName = pod.Name();

                        <tr>
                            <td>@pod.Metadata.Name</td>
                            <td>@pod.Metadata.CreationTimestamp</td>
                            <td>@pod.Status.Phase</td>
                            <td>@pod.Status.Reason</td>
                            <td>
                                <input id="@string.Concat(podNamespace, podName)"
                                       title="button-pod-@pod.Metadata.Name"
                                       type="checkbox"
                                       class="form-check"
                                       @onchange="async (changeEventArg) => await OnPodLogClick(changeEventArg, podNamespace, podName)" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <hr />

    <h4>Logs</h4>

    <button title="btn-log-autoscroll-top" class="btn btn-outline-info" @onclick="ChangeScrollToBottom">Auto scroll to bottom : @ScrollToBottom</button>
    <button title="btn-log-clearlog-top" class="btn btn-outline-danger" @onclick="ClearLogs">Clear logs </button>

    <div id="log-container">
        @foreach (var message in PodLogs)
        {
            <span class="log_line text">@message</span>
        }
    </div>

    if (PodLogs.Count > 0)
    {
        <button title="btn-log-autoscroll-bottom" class="btn btn-outline-info" @onclick="ChangeScrollToBottom">Auto scroll to bottom : @ScrollToBottom</button>
        <button title="btn-log-clearlog-bottom" class="btn btn-outline-danger" @onclick="ClearLogs">Clear logs </button>
    }
}

@code {
    public V1NamespaceList? NamespaceList { get; set; }

    public V1DeploymentList? Deployments { get; set; }

    public V1PodList? Pods { get; set; }

    public string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            NamespaceList = await Client.ListNamespaceAsync();

            StateHasChanged();

            Deployments = await Client.ListDeploymentForAllNamespacesAsync();

            Pods = new V1PodList();

            Pods.Items = new List<V1Pod>();

            foreach (var ns in NamespaceList.Items)
            {
                var podList = await Client.ListNamespacedPodAsync(ns.Metadata.Name);

                foreach (var pod in podList.Items)
                {
                    Pods.Items.Add(pod);
                }

                StateHasChanged();
            }

            var cookies = HttpContextAccessor.HttpContext?.Request.Cookies;

            var cookiesCollection = new System.Net.CookieContainer();

            if (cookies != null)
            {
                foreach (var c in cookies)
                {
                    cookiesCollection.Add(new System.Net.Cookie(c.Key, c.Value) { Domain = await JS.InvokeAsync<string>("window.GetHostname") });
                }
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/GetPodLog"), options =>
                {
                    options.Cookies = cookiesCollection;
                })
                .Build();

            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Error = e.Message;
            Logger.LogError(e, e.Message);
        }
    }

    private HubConnection? hubConnection;
    private System.Collections.Concurrent.BlockingCollection<string> PodLogs { get; set; } = new();
    private Dictionary<string, System.Threading.CancellationTokenSource> TokensBag { get; set; } = new();

    private async Task OnPodLogClick(ChangeEventArgs args, string podNamespace, string podName)
    {
        var taskKey = $"{podNamespace}{podName}";

        if (TokensBag.TryGetValue(taskKey, out var tokenSourceCancellation))
        {
            tokenSourceCancellation.Cancel();

            TokensBag.Remove(taskKey);
        }
        else
        {
            var tokenSource = new System.Threading.CancellationTokenSource();

            var channel = await hubConnection.StreamAsChannelAsync<string>("GetPodLog", podNamespace, podName, tokenSource.Token);

            TokensBag.Add(taskKey, tokenSource);

            while (await channel.WaitToReadAsync(tokenSource.Token))
            {
                while (channel.TryRead(out var log))
                {
                    PodLogs.Add(log);
                    StateHasChanged();
                    if (ScrollToBottom)
                    {
                        await JS.InvokeVoidAsync("window.scrollToBottom");
                    }
                }
            }
        }
    }

    private async Task OnDeploymentLogClick(ChangeEventArgs args, string deploymentNamespace, string deploymentName)
    {
        if (Pods != null && Pods.Items != null)
        {
            var taskList = new List<Task>();

            foreach (var pod in Pods.Items)
            {
                if (pod.Name().StartsWith(deploymentName))
                {
                    taskList.Add(OnPodLogClick(args, deploymentNamespace, pod.Name()));
                }
            }

            foreach (var task in taskList)
            {
                await task;
            }
        }
    }

    private async Task DeleteNamespace(V1Namespace ns)
    {
        await Client.DeleteNamespaceAsync(ns.Metadata.Name, new V1DeleteOptions());

        if (Pods == null)
        {
            Pods = new V1PodList();
        }

        NamespaceList = await Client.ListNamespaceAsync();

        Pods.Items = Pods.Items.Where(p =>
        {
            if (p.Namespace() != ns.Metadata.Name)
            {
                return true;
            }

            var taskKey = $"{ns.Metadata.Name}{p.Metadata.Name}";

            if (TokensBag.TryGetValue(taskKey, out var tokenSourceCancellation))
            {
                tokenSourceCancellation.Cancel();

                TokensBag.Remove(taskKey);
            }

            return false;
        }).ToList();

        StateHasChanged();
    }

    private void ClearLogs()
    {
        while (PodLogs.TryTake(out _)) { }
    }

    private bool ScrollToBottom { get; set; }

    public void ChangeScrollToBottom()
    {
        ScrollToBottom = !ScrollToBottom;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public string? NamespaceCollapseClass { get; set; }

    public string? DeploymentCollapseClass { get; set; }

    public string? PodsCollapseClass { get; set; }

    public void Collapsing(string collapseId)
    {
        if (collapseId == "collapseNamespace")
        {
            NamespaceCollapseClass = string.IsNullOrEmpty(NamespaceCollapseClass) ? "collapse" : "";
        }
        else if (collapseId == "collapseDeployment")
        {
            DeploymentCollapseClass = string.IsNullOrEmpty(DeploymentCollapseClass) ? "collapse" : "";
        }
        else if (collapseId == "collapsePods")
        {
            PodsCollapseClass = string.IsNullOrEmpty(PodsCollapseClass) ? "collapse" : "";
        }
    }
}
