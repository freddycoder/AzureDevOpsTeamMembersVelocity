@page "/Kubernetes"
@using Microsoft.JSInterop
@inject k8s.Kubernetes Client
@inject NavigationManager NavigationManager
@inject ILogger<KubernetesDashboard> Logger
@inject IJSRuntime JS

@if (Error != null)
{
    <ul class="list-group mb-3">
        <li class="list-group-item list-group-item-danger">@Error</li>
    </ul>
}

<h3>Kubernetes</h3>

<h4>Namespaces</h4>

@if (NamespaceList != null)
{
    <table class="table table-hover table-responsive">
        <caption>Table of kubernetes namespace</caption>
        <thead>
            <tr>
                <th>Name</th>
                <th>Creation time</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var ns in NamespaceList.Items)
            {
                <tr>
                    <td>@ns.Metadata.Name</td>
                    <td>@ns.Metadata.CreationTimestamp</td>
                    <td>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Pods</h4>

    <table class="table table-hover table-responsive">
        <caption>Table of kubernetes pods</caption>
        <thead>
            <tr>
                <th>Name</th>
                <th>Creation time</th>
                <th>Select</th>
            </tr>
        </thead>
        <tbody>
            @if (Pods != null && Pods.Items != null)
            {
                @foreach (var pod in Pods.Items)
                {
                    var podNamespace = pod.Namespace();
                    var podName = pod.Name();

                    <tr>
                        <td>@pod.Metadata.Name</td>
                        <td>@pod.Metadata.CreationTimestamp</td>
                        <td>
                            <input id="@string.Concat(podNamespace, podName)"
                                   type="checkbox"
                                   class="form-check oi-check"
                                   @onchange="async (changeEventArg) => await OnPodLogClick(changeEventArg, podNamespace, podName)" />
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <h4>Logs</h4>

    <button class="btn btn-outline-info" @onclick="ChangeScrollToBottom">Auto scroll to bottom : @ScrollToBottom</button>
    <button class="btn btn-outline-danger" @onclick="ClearLogs">Clear logs </button>

    <div id="log-container">
        @foreach (var message in PodLogs)
        {
            <span class="log_line text">@message</span>
        }
    </div>

    <button class="btn btn-outline-info" @onclick="ChangeScrollToBottom">Auto scroll to bottom : @ScrollToBottom</button>
    <button class="btn btn-outline-danger" @onclick="ClearLogs">Clear logs </button>
}

@code {
    public V1NamespaceList? NamespaceList { get; set; }

    public V1PodList? Pods { get; set; }

    public string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            NamespaceList = await Client.ListNamespaceAsync();

            StateHasChanged();

            Pods = new V1PodList();

            Pods.Items = new List<V1Pod>();

            foreach (var ns in NamespaceList.Items)
            {
                var podList = await Client.ListNamespacedPodAsync(ns.Metadata.Name);

                foreach (var pod in podList.Items)
                {
                    Pods.Items.Add(pod);
                }

                StateHasChanged();
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/GetPodLog"), options =>
                {
                    options.UseDefaultCredentials = true;
                })
                .Build();

            await hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Error = e.Message;
            Logger.LogError(e, e.Message);
        }
    }

    private HubConnection? hubConnection;
    private System.Collections.Concurrent.BlockingCollection<string> PodLogs { get; set; } = new();
    private Dictionary<string, System.Threading.CancellationTokenSource> TokensBag { get; set; } = new();

    private async Task OnPodLogClick(ChangeEventArgs args, string podNamespace, string podName)
    {
        var taskKey = $"{podNamespace}{podName}";

        if (TokensBag.TryGetValue(taskKey, out var tokenSourceCancellation))
        {
            tokenSourceCancellation.Cancel();

            TokensBag.Remove(taskKey);
        }
        else
        {
            var tokenSource = new System.Threading.CancellationTokenSource();

            var channel = await hubConnection.StreamAsChannelAsync<string>("GetPodLog", podNamespace, podName, tokenSource.Token);

            TokensBag.Add(taskKey, tokenSource);

            while (await channel.WaitToReadAsync(tokenSource.Token))
            {
                while (channel.TryRead(out var log))
                {
                    PodLogs.Add(log);
                    StateHasChanged();
                    if (ScrollToBottom)
                    {
                        await JS.InvokeVoidAsync("window.scrollToBottom");
                    }
                }
            }
        }
    }

    private void ClearLogs()
    {
        while (PodLogs.TryTake(out _)) { }
    }

    private bool ScrollToBottom { get; set; }

    public void ChangeScrollToBottom()
    {
        ScrollToBottom = !ScrollToBottom;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
