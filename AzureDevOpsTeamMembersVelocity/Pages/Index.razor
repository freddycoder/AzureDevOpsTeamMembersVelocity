@page "/"
@inject TeamMembersVelocitySettings AppSettings
@inject DevOpsService DevOpsService

<h1>Team members velocity</h1>

Welcome to the team members velocity app.

<div class="row">
    <div class="col-4 mt-2">
        <div class="form-group">
            <label for="exampleInputPassword1">Api Key</label>
            <input @bind="ApiKey" autocomplete="new-password" type="password" class="form-control" id="apiKey" placeholder="API KEY">
        </div>
        <div class="form-group">
            <label for="inputOrganisation">Organisation</label>
            <input id="inputOrganisation" autocomplete="new-password" @bind="Organisation" @bind:event="oninput" type="text" class="form-control" aria-describedby="describeOrganisation" placeholder="Organisation">
            <small id="describeOrganisation" class="form-text text-muted">dev.azure.com/{organisation}</small>
        </div>
        <div class="form-group">
            <label for="inputTeamProject">Team Project</label>
            <input id="inputTeamProject" autocomplete="new-password" list="teamProjectSuggestion" @bind="TeamProject" @bind:event="oninput" type="text" class="form-control" aria-describedby="describeTeamProject" placeholder="Team project">
            @if (TeamProjects != null)
            {
                <datalist id="teamProjectSuggestion">
                    @foreach (var teamProject in TeamProjects)
                    {
                        <option value="@teamProject.Name" />
                    }
                </datalist>
            }
            <small id="describeTeamProject" class="form-text text-muted">dev.azure.com/@Organisation/_apis/projects/{team-project}</small>
        </div>
        <div class="form-group">
            <label for="inputTeam">Team</label>
            <input id="inputTeam" autocomplete="new-password" list="teamSuggestion" @bind="Team" @bind:event="oninput" type="text" class="form-control" aria-describedby="describeTeam" placeholder="Team">
            <datalist id="teamSuggestion">
                @foreach (var team in Teams)
                {
                    <option value="@team.Name" />
                }
            </datalist>
            <small id="describeTeam" class="form-text text-muted">dev.azure.com/@Organisation/_apis/projects/@TeamProject/teams?api-version=6.0</small>
        </div>
        <button @onclick="SaveSettings" class="btn btn-primary">Save settings</button>
    </div>

    <div class="col-md-2">

    </div>

    @if (Sprints != null)
    {
        <div class="col-md-6">
            <ul class="list-group">
                @foreach (var iteration in Sprints)
                {
                    <li class="list-group-item list-group-item-action">
                        <a href="/SprintAnalysis?sprints=@iteration.Url">@iteration.Name</a>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="col-md-4">
            <ul class="list-group">
                @foreach (var iteration in Sprints)
                {
                    <li>zero sprint found</li>
                }
            </ul>
        </div>
    }
</div>


@code {
    private string _org;
    [Parameter]
    public string Organisation
    {
        get
        {
            return _org;
        }
        set
        {
            _org = value;
            NeedToSaveConfig = true;
        }
    }

    private string _teamProject;
    [Parameter]
    public string TeamProject
    {
        get
        {
            return _teamProject;
        }
        set
        {
            _teamProject = value;
            NeedToSaveConfig = true;
        }
    }

    private string _team;
    [Parameter]
    public string Team
    {
        get
        {
            return _team;
        }
        set
        {
            _team = value;
            NeedToSaveConfig = true;
        }
    }

    private string _board;
    [Parameter]
    public string Board
    {
        get
        {
            return _board;
        }
        set
        {
            _board = value;
            NeedToSaveConfig = true;
        }
    }

    private string _apiKey;
    [Parameter]
    public string ApiKey
    {
        get
        {
            return _apiKey;
        }
        set
        {
            _apiKey = value;
            NeedToSaveConfig = true;
        }
    }

    public bool NeedToSaveConfig { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Organisation = AppSettings.Organisation;
        TeamProject = AppSettings.TeamProject;
        Team = AppSettings.Team;
        ApiKey = AppSettings.ApiKey;

        if (string.IsNullOrWhiteSpace(AppSettings.Organisation) == false &&
            string.IsNullOrWhiteSpace(AppSettings.ApiKey) == false)
        {
            await GetProjects();
        }

        if (string.IsNullOrWhiteSpace(TeamProject) == false)
        {
            await GetTeams();
        }

        if (string.IsNullOrWhiteSpace(Team) == false)
        {
            await GetSprints();
        }
    }

    public async Task SaveSettings()
    {
        if (NeedToSaveConfig)
        {
            AppSettings.Organisation = Organisation;
            AppSettings.TeamProject = TeamProject;
            AppSettings.Team = Team;
            AppSettings.Board = Board;
            AppSettings.ApiKey = ApiKey;

            await File.WriteAllTextAsync("AzureDevOpsTeamMemberVelocity.json", JsonSerializer.Serialize(AppSettings));

            NeedToSaveConfig = false;
        }
    }

    public List<TeamProject> TeamProjects { get; set; } = new();

    public async Task GetProjects()
    {
        TeamProjects = (await DevOpsService.Projects(Organisation))?.Value;

        StateHasChanged();
    }

    public List<Microsoft.TeamFoundation.Core.WebApi.WebApiTeam> Teams { get; set; } = new();

    public async Task GetTeams()
    {
        Teams = (await DevOpsService.Teams(Organisation, TeamProjects.First(t => t.Name == TeamProject).Id))?.Value;

        StateHasChanged();
    }

    public List<Sprint> Sprints { get; set; } = new();

    public async Task GetSprints()
    {
        Sprints = (await DevOpsService.Sprints(Organisation, TeamProject, Team))?.Value;

        StateHasChanged();
    }
}