@page "/"
@inject TeamMembersVelocitySettings AppSettings

<h1>Team members velocity</h1>

Welcome to the team members velocity app.

<div class="col-4 mt-2">
    <div class="form-group">
        <label for="exampleInputPassword1">Api Key</label>
        <input @bind="ApiKey" autocomplete="new-password" type="password" class="form-control" id="apiKey" placeholder="API KEY">
    </div>
    <div class="form-group">
        <label for="inputOrganisation">Organisation</label>
        <input id="inputOrganisation" autocomplete="new-password" @bind="Organisation" @bind:event="oninput" type="text" class="form-control" aria-describedby="describeOrganisation" placeholder="Organisation">
        <small id="describeOrganisation" class="form-text text-muted">dev.azure.com/{organisation}</small>
    </div>
    <div class="form-group">
        <label for="inputTeamProject">Team Project</label>
        <input id="inputTeamProject" autocomplete="new-password" list="teamProjectSuggestion" @bind="TeamProject" @bind:event="oninput" type="text" class="form-control" aria-describedby="describeTeamProject" placeholder="Team project">
        <datalist id="teamProjectSuggestion">
            @foreach (var teamProject in TeamProjects)
            {
                <option value="@teamProject.Name" />
            }
        </datalist>
        <small id="describeTeamProject" class="form-text text-muted">dev.azure.com/@Organisation/_apis/projects/{team-project}</small>
    </div>
    <div class="form-group">
        <label for="inputTeam">Team</label>
        <input id="inputTeam" autocomplete="new-password" list="teamSuggestion" @bind="Team" @bind:event="oninput" type="text" class="form-control" aria-describedby="describeTeam" placeholder="Team">
        <datalist id="teamSuggestion">
            @foreach (var team in Teams)
            {
                <option value="@team.Name" />
            }
        </datalist>
        <small id="describeTeam" class="form-text text-muted">dev.azure.com/@Organisation/_apis/projects/@TeamProject/teams?api-version=6.0</small>
    </div>
    <div class="form-group">
        <label for="inputTeam">Board</label>
        <input id="inputBoard" autocomplete="new-password" list="boardSuggestion" @bind="Board" @bind:event="oninput" type="text" class="form-control" aria-describedby="describeBoard" placeholder="Board">
        <datalist id="boardSuggestion">
            @foreach (var board in Boards)
            {
                <option value="@board.Name" />
            }
        </datalist>
        <small id="describeTeam" class="form-text text-muted">dev.azure.com/@Organisation/@TeamProject/</small>
    </div>
    <button @onclick="SaveSettings" class="btn btn-primary">Save settings</button>
</div>

@code {
    private string _org;
    [Parameter]
    public string Organisation
    {
        get
        {
            return _org;
        }
        set
        {
            _org = value;
            NeedToSaveConfig = true;
        }
    }

    private string _teamProject;
    [Parameter]
    public string TeamProject
    {
        get
        {
            return _teamProject;
        }
        set
        {
            _teamProject = value;
            NeedToSaveConfig = true;
        }
    }

    private string _team;
    [Parameter]
    public string Team
    {
        get
        {
            return _team;
        }
        set
        {
            _team = value;
            NeedToSaveConfig = true;
        }
    }

    private string _board;
    [Parameter]
    public string Board
    {
        get
        {
            return _board;
        }
        set
        {
            _board = value;
            NeedToSaveConfig = true;
        }
    }

    private string _apiKey;
    [Parameter]
    public string ApiKey
    {
        get
        {
            return _apiKey;
        }
        set
        {
            _apiKey = value;
            NeedToSaveConfig = true;
        }
    }

    public bool NeedToSaveConfig { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Organisation = AppSettings.Organisation;
        TeamProject = AppSettings.TeamProject;
        Team = AppSettings.Team;
        ApiKey = AppSettings.ApiKey;

        if (string.IsNullOrWhiteSpace(AppSettings.Organisation) == false &&
            string.IsNullOrWhiteSpace(AppSettings.ApiKey) == false)
        {
            await GetProjects();
        }

        if (string.IsNullOrWhiteSpace(TeamProject) == false)
        {
            await GetTeams();
        }

        if (string.IsNullOrWhiteSpace(Team) == false)
        {
            await GetBoards();
        }
    }

    public async Task SaveSettings()
    {
        if (NeedToSaveConfig)
        {
            AppSettings.Organisation = Organisation;
            AppSettings.TeamProject = TeamProject;
            AppSettings.Team = Team;
            AppSettings.Board = Board;
            AppSettings.ApiKey = ApiKey;

            await File.WriteAllTextAsync("AzureDevOpsTeamMemberVelocity.json", JsonSerializer.Serialize(AppSettings));

            NeedToSaveConfig = false;
        }
    }

    public List<TeamProject> TeamProjects { get; set; } = new();

    public async Task GetProjects()
    {
        Console.WriteLine("Try fetch projects");

        try
        {
            var personalaccesstoken = ApiKey;

            using (HttpClient client = new HttpClient())
            {
                client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
                    Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(string.Format("{0}:{1}", "", personalaccesstoken))));

                using (HttpResponseMessage response = await client.GetAsync($"https://dev.azure.com/{Organisation}/_apis/projects"))
                {
                    response.EnsureSuccessStatusCode();
                    string responseBody = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(responseBody);

                    var responsesDeserialized = JsonSerializer.Deserialize<ListResponse<TeamProject>>(responseBody, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        WriteIndented = true
                    });

                    Console.WriteLine(responsesDeserialized.Count);
                    Console.WriteLine(responsesDeserialized.Value);

                    if (responsesDeserialized?.Value != null)
                    {
                        TeamProjects = responsesDeserialized.Value;
                    }

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.ToString());
        }
    }

    public List<Microsoft.TeamFoundation.Core.WebApi.WebApiTeam> Teams { get; set; } = new();

    public async Task GetTeams()
    {
        Console.WriteLine("Try fetch teams");

        try
        {
            var personalaccesstoken = ApiKey;

            using (HttpClient client = new HttpClient())
            {
                client.DefaultRequestHeaders.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
                    Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(
                            string.Format("{0}:{1}", "", personalaccesstoken))));

                using (HttpResponseMessage response = await client.GetAsync($"https://dev.azure.com/{Organisation}/_apis/projects/{TeamProjects.First(t => t.Name == TeamProject).Id}/teams?api-version=6.0"))
                {
                    response.EnsureSuccessStatusCode();
                    string responseBody = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(responseBody);

                    var responsesDeserialized = JsonSerializer.Deserialize<ListResponse<Microsoft.TeamFoundation.Core.WebApi.WebApiTeam>>(responseBody, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull,
                        WriteIndented = true
                    });

                    Console.WriteLine(responsesDeserialized.Count);
                    Console.WriteLine(responsesDeserialized.Value);

                    if (responsesDeserialized?.Value != null)
                    {
                        Teams = responsesDeserialized.Value;
                    }

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.ToString());
        }
    }

    public List<Microsoft.TeamFoundation.Work.WebApi.Board> Boards { get; set; } = new();

    public async Task GetBoards()
    {
        Console.WriteLine("Try fetch boards");

        try
        {
            var personalaccesstoken = ApiKey;

            using (HttpClient client = new HttpClient())
            {
                client.DefaultRequestHeaders.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
                    Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(
                            string.Format("{0}:{1}", "", personalaccesstoken))));

                using (HttpResponseMessage response = await client.GetAsync($"https://dev.azure.com/{Organisation}/{TeamProjects.First(t => t.Name == TeamProject).Id}/{Teams.First(t => t.Name == Team)}/_apis/work/boards?api-version=5.0"))
                {
                    response.EnsureSuccessStatusCode();
                    string responseBody = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(responseBody);

                    var responsesDeserialized = JsonSerializer.Deserialize<ListResponse<Microsoft.TeamFoundation.Work.WebApi.Board>>(responseBody, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull,
                        WriteIndented = true
                    });

                    Console.WriteLine(responsesDeserialized.Count);
                    Console.WriteLine(responsesDeserialized.Value);

                    if (responsesDeserialized?.Value != null)
                    {
                        Boards = responsesDeserialized.Value;
                    }

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.ToString());
        }
    }
}