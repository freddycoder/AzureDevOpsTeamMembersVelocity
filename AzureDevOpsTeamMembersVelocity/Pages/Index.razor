@page "/"
@inject TeamMembersVelocitySettings AppSettings
@inject DevOpsService DevOpsService
@inject IDataProtectionProvider DataProtectionProvider
@inject AzureDevOpsTeamMembersVelocity.Services.TokenProvider TokenProvider
@attribute [Authorize]

<h1>Team members velocity</h1>

Welcome to the team members velocity app.

<div class="row">
    <EditForm class="col-4 mt-2" Model="AppSettings" OnValidSubmit="SaveSettings">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="exampleInputPassword1">Api Key</label>
            <SafeTextInput id="apiKey"
                           class="form-control"
                           @bind-Value="ApiKey"
                           type="password"
                           placeholder="API KEY" />
        </div>
        <div class="form-group">
            <label for="inputOrganisation">Organisation</label>
            <SafeTextInput id="inputOrganisation"
                           class="form-control"
                           @bind-Value="Organisation"
                           type="text"
                           aria-describedby="describeOrganisation"
                           placeholder="Organisation" />
            <small id="describeOrganisation" class="form-text text-muted">dev.azure.com/{organisation}</small>
        </div>
        <div class="form-group">
            <label for="inputTeamProject">Team Project</label>
            <SafeTextInput id="inputTeamProject"
                           class="form-control"
                           @bind-Value="TeamProject"
                           @onfocus="GetProjects"
                           type="text"
                           list="teamProjectSuggestion"
                           aria-describedby="describeTeamProject"
                           placeholder="Team project" />
            @if (TeamProjects != null)
            {
                <datalist id="teamProjectSuggestion">
                    @foreach (var teamProject in TeamProjects)
                    {
                        <option value="@teamProject.Name" />
                    }
                </datalist>
            }
            <small id="describeTeamProject" class="form-text text-muted">dev.azure.com/@Organisation/_apis/projects/{team-project}</small>
        </div>
        <div class="form-group">
            <label for="inputTeam">Team</label>
            <SafeTextInput id="inputTeam"
                           class="form-control"
                           @bind-Value="Team"
                           @onfocus="GetTeams"
                           @onchange="GetSprints"
                           type="text"
                           list="teamSuggestion"
                           aria-describedby="describeTeam"
                           placeholder="Team" />
            <datalist id="teamSuggestion">
                @if (Teams != null)
                {
                    @foreach (var team in Teams)
                    {
                        <option value="@team.Name" />
                    }
                }
            </datalist>
            <small id="describeTeam" class="form-text text-muted">dev.azure.com/@Organisation/_apis/projects/@TeamProject/teams?api-version=6.0</small>
        </div>
        <input name="__RequestVerificationToken" type="hidden" value="@TokenProvider.XsrfToken">
        <button class="btn btn-secondary">Persist settings</button>
    </EditForm>

    <div class="col-md-2">

    </div>

    @if (Sprints != null)
    {
        <div class="col-md-6">
            <ul class="list-group">
                @foreach (var iteration in Sprints)
                {
                    <li class="list-group-item list-group-item-action">
                        <a href="/SprintAnalysis?sprints=@iteration.Url">@iteration.Name</a>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="col-md-6">
            <ul class="list-group">
                <li>zero sprint found</li>
            </ul>
        </div>
    }
</div>


@code {
    private string? _org;
    [Parameter]
    [StringLength(256, ErrorMessage = "Organisation is too long.")]
    public string? Organisation
    {
        get
        {
            return _org;
        }
        set
        {
            _org = value;
            NeedToSaveConfig = true;

            AppSettings.Organisation = _org;
        }
    }

    private string? _teamProject;
    [Parameter]
    [StringLength(64, ErrorMessage = "TeamProject is too long.")]
    public string? TeamProject
    {
        get
        {
            return _teamProject;
        }
        set
        {
            _teamProject = value;
            NeedToSaveConfig = true;

            AppSettings.TeamProject = _teamProject;
        }
    }

    private string? _team;
    [Parameter]
    [StringLength(64, ErrorMessage = "Team is too long.")]
    public string? Team
    {
        get
        {
            return _team;
        }
        set
        {
            _team = value;
            NeedToSaveConfig = true;

            AppSettings.Team = _team;
        }
    }

    private string? _apiKey;
    [Parameter]
    [StringLength(256, ErrorMessage = "ApiKey is too long.")]
    public string? ApiKey
    {
        get
        {
            return _apiKey;
        }
        set
        {
            _apiKey = value;
            NeedToSaveConfig = true;

            AppSettings.ApiKey = _apiKey;
        }
    }

    public bool NeedToSaveConfig { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Organisation = AppSettings?.Organisation;
        TeamProject = AppSettings?.TeamProject;
        Team = AppSettings?.Team;
        ApiKey = AppSettings?.ApiKey;

        if (string.IsNullOrWhiteSpace(AppSettings?.Organisation) == false &&
            string.IsNullOrWhiteSpace(AppSettings?.ApiKey) == false)
        {
            await GetProjects();
        }

        if (string.IsNullOrWhiteSpace(TeamProject) == false)
        {
            await GetTeams();
        }

        if (string.IsNullOrWhiteSpace(Team) == false)
        {
            await GetSprints();
        }
    }

    public async Task SaveSettings()
    {
        if (NeedToSaveConfig)
        {
            AppSettings.Organisation = Organisation;
            AppSettings.TeamProject = TeamProject;
            AppSettings.Team = Team;
            AppSettings.ApiKey = ApiKey;

            var appSettingsJson = JsonSerializer.Serialize(AppSettings);

            var dateProtector = DataProtectionProvider.CreateProtector(nameof(AzureDevOpsTeamMembersVelocity));

            var encryptedText = dateProtector.Protect(appSettingsJson);

            await File.WriteAllTextAsync("AzureDevOpsTeamMemberVelocity.json", encryptedText);

            NeedToSaveConfig = false;
        }
    }

    public List<TeamProject>? TeamProjects { get; set; } = new();

    public async Task GetProjects()
    {
        if (Organisation != null)
        {
            TeamProjects = (await DevOpsService.Projects(Organisation))?.Value;

            StateHasChanged();
        }
    }

    public List<Microsoft.TeamFoundation.Core.WebApi.WebApiTeam>? Teams { get; set; } = new();

    public async Task GetTeams()
    {
        if (Organisation != null && TeamProjects != null)
        {
            Teams = (await DevOpsService.Teams(Organisation, TeamProjects.First(t => t.Name == TeamProject).Id))?.Value;

            StateHasChanged();
        }
    }

    public List<Sprint>? Sprints { get; set; } = new();

    public async Task GetSprints()
    {
        if (Organisation != null && TeamProject != null && Team != null)
        {
            Sprints = (await DevOpsService.Sprints(Organisation, TeamProject, Team))?.Value;

            StateHasChanged();
        }
    }
}