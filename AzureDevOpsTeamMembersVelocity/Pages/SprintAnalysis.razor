@page "/SprintAnalysis"
@inject NavigationManager NavManager
@inject VelocityService VelocityService
@inject DevOpsService DevOpsService

<h3>SprintAnalysis</h3>

@if (Sprint != null)
{
    <div class="row">
        <div class="col-md-4">
            <dl>
                <dt>Name</dt>
                <dd>@Sprint.Name</dd>

                <dt>Path</dt>
                <dd>@Sprint.Path</dd>
            </dl>
        </div>
        <div class="col-md-4">
            <dl>
                <dt>Start date</dt>
                <dd>@Sprint.Attributes?.StartDate</dd>

                <dt>Finish date</dt>
                <dd>@Sprint.Attributes?.FinishDate</dd>

                <dt>Timeframe</dt>
                <dd>@Sprint.Attributes?.TimeFrame</dd>
            </dl>
        </div>
    </div>
}
else
{
    <div>
        <p>Loading sprint information...</p>
    </div>
}


@if (MembersVelocities != null)
{
    <table class="table table-striped table-hover table-responsive-md">
        <thead>
            <tr>
                <th>Person</th>
                <th>Hours of work done</th>
                <th>Estimated Capacity</th>
                <th>Real capacity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < MembersVelocities.Count; i++)
            {
                var updates = @MembersVelocities[i].Updates;

                <tr>
                    <td>@MembersVelocities[i].DisplayName</td>
                    <td>@MembersVelocities[i].HoursOfWorkDone</td>
                    <td>@MembersVelocities[i].CapacitySaved</td>
                    <td>@MembersVelocities[i].RealCapacity.ToString("F2")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowUpdates(updates)">Show history</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div>
        <p>Building velocity table ...</p>
    </div>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    public Sprint Sprint { get; set; }

    public List<MemberVelocity> MembersVelocities { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sprints", out var sprintUrl))
        {
            Sprint = await DevOpsService.Sprint(sprintUrl);

            StateHasChanged();

            if (Sprint != null)
            {
                List<Capacity> capacities = default;

                if (string.IsNullOrWhiteSpace(Sprint.Links?.Capacity?.Href) == false)
                {
                    capacities = await DevOpsService.Capacities(Sprint.Links.Capacity.Href);
                }

                TeamDaysOff teamDaysOff = default;

                if (string.IsNullOrWhiteSpace(Sprint.Links?.TeamDaysOff?.Href) == false)
                {
                    teamDaysOff = await DevOpsService.TeamDaysOff(Sprint.Links.TeamDaysOff.Href);
                }

                var membersVelocities = await VelocityService.MemberVelocities(sprintUrl);

                if (capacities != default)
                {
                    foreach (var capacity in capacities)
                    {
                        if (membersVelocities.TryGetValue(capacity.TeamMember.DisplayName, out var velocity))
                        {
                            if (capacity.Activities?.Any() == true)
                                velocity.CapacitySaved = capacity.Activities.Select(a => (double)a.CapacityPerDay).Sum();

                            if (Sprint.Attributes?.StartDate != null &&
                                Sprint.Attributes.StartDate < DateTimeOffset.Now &&
                                Sprint.Attributes?.FinishDate != null)
                            {
                                var nbDayOfWork = (Sprint.Attributes.FinishDate - Sprint.Attributes.StartDate).Value.TotalDays;

                                if (capacity.DaysOff?.Any() == true)
                                    nbDayOfWork -= capacity.DaysOff.Select(d => (d.End - d.Start).TotalDays).Sum();

                                if (teamDaysOff?.DaysOff?.Any() == true) 
                                    nbDayOfWork -= nbDayOfWork - teamDaysOff.DaysOff.Select(d => (d.End - d.Start).TotalDays).Sum();

                                if (nbDayOfWork != 0)
                                    velocity.RealCapacity = velocity.HoursOfWorkDone / nbDayOfWork;
                            }
                        }
                    }
                }

                MembersVelocities = membersVelocities.Values.OrderByDescending(v => v.HoursOfWorkDone).ToList();
            }
        }
    }

    private void ShowUpdates(List<WorkItemUpdate> updates)
    {
        var parameters = new ModalParameters();

        parameters.Add("Updates", updates);

        Modal.Show<PersonHistoryModal>("Update history", parameters);
    }
}
