@page "/SprintAnalysis"
@inject NavigationManager NavManager
@inject VelocityService VelocityService
@inject DevOpsService DevOpsService
@attribute [Authorize]

@if (Error != null)
{
    <ul class="list-group mb-3">
        <li class="list-group-item list-group-item-danger">@Error</li>
    </ul>
}

<h3>SprintAnalysis</h3>

@if (Sprint != null)
{
    <div class="row">
        <div class="col-md-4">
            <dl>
                <dt>Name</dt>
                <dd>@Sprint.Name</dd>

                <dt>Path</dt>
                <dd>@Sprint.Path</dd>
            </dl>
        </div>
        <div class="col-md-4">
            <dl>
                <dt>Start date</dt>
                <dd>@Sprint.Attributes?.StartDate</dd>

                <dt>Finish date</dt>
                <dd>@Sprint.Attributes?.FinishDate</dd>

                <dt>Timeframe</dt>
                <dd>@Sprint.Attributes?.TimeFrame</dd>
            </dl>
        </div>
        <div class="col-md-4">
            <dl>
                <dt>Total days</dt>
                <dd>@Sprint.GetTotalDays()</dd>
            </dl>

            @if (TeamSettings != null)
            {
                <dl>
                    <dt>Total working days</dt>
                    <dd>@Sprint.GetTotalWorkingDays(TeamSettings.WorkingDays, TeamDaysOff)</dd>
                </dl>
            }
        </div>
    </div>
}
else
{
    <div>
        <p>Loading sprint information...</p>
    </div>
}


@if (MembersVelocities != null)
{
    <div class="row">
        <div class="col-md-6">
            <h3>Velocity table</h3>
        </div>

        <div class="col-md-6">
            <button class="btn btn-secondary float-md-right mr-3" @onclick="RefreshVelocity">Refresh</button>
        </div>
    </div>

    <table class="table table-striped table-hover table-responsive-md">
            <thead>
                <tr>
                    <th>Person</th>
                    <th>Hours of work done</th>
                    <th>Hours added</th>
                    <th>Hours removed</th>
                    <th>Estimated Capacity</th>
                    <th>Real capacity</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var velocity in MembersVelocities.OrderByDescending(v => v.HoursOfWorkDone))
                {
                    var updates = velocity.Updates;

                    <tr>
                        <td>@velocity.DisplayName</td>
                        <td>@velocity.HoursOfWorkDone.ToString("F2")</td>
                        <td>@velocity.HoursAdded.ToString("F2")</td>
                        <td>@velocity.HoursRemoved.ToString("F2")</td>
                        <td>@velocity.CapacitySaved.ToString("F2")</td>
                        <td>@velocity.RealCapacity.ToString("F2")</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => ShowUpdates(updates)">Show history</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
}
else
{
    <div>
        <p>Building velocity table ...</p>
    </div>
}

@code {
    public string? Error { get; set; }

    [CascadingParameter]
    public IModalService? Modal { get; set; }

    public Sprint? Sprint { get; set; }

    public List<Microsoft.TeamFoundation.Work.WebApi.TeamMemberCapacityIdentityRef>? Capacities { get; set; }

    public Microsoft.TeamFoundation.Work.WebApi.TeamSetting? TeamSettings { get; set; }

    public Microsoft.TeamFoundation.Work.WebApi.TeamSettingsDaysOff? TeamDaysOff { get; set; }

    public HashSet<MemberVelocity>? MembersVelocities { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sprints", out var sprintUrl))
        {
            Sprint = (await DevOpsService.Sprint(sprintUrl)).Item1;

            StateHasChanged();

            if (Sprint != null)
            {
                if (string.IsNullOrWhiteSpace(Sprint.Links?.Capacity?.Href) == false)
                {
                    Capacities = (await DevOpsService.Capacities(Sprint.Links.Capacity.Href)).Item1?.Value;
                }

                if (string.IsNullOrWhiteSpace(Sprint.Links?.TeamDaysOff?.Href) == false)
                {
                    TeamDaysOff = (await DevOpsService.TeamDaysOff(Sprint.Links.TeamDaysOff.Href)).Item1;
                }

                if (string.IsNullOrWhiteSpace(Sprint.Links?.TeamSettings?.Href) == false)
                {
                    TeamSettings = (await DevOpsService.TeamSettings(Sprint.Links.TeamSettings.Href)).Item1;

                    if (TeamSettings != null) StateHasChanged();
                }

                MembersVelocities = new HashSet<MemberVelocity>();

                await foreach (var velocity in VelocityService.MemberVelocities(sprintUrl, Capacities, Sprint, TeamDaysOff, TeamSettings))
                {
                    MembersVelocities.Add(velocity);
                    StateHasChanged();
                }

                SaveVelocity();
            }
        }
    }

    private void ShowUpdates(List<WorkItemUpdate> updates)
    {
        var parameters = new ModalParameters();

        parameters.Add("Updates", updates);

        Modal?.Show<PersonHistoryModal>("Update history", parameters);
    }

    private void SaveVelocity()
    {
        if (Sprint == null || Sprint.Url == null || MembersVelocities == null)
        {
            return;
        }

        VelocityService.SaveVelocity(Sprint.Url, MembersVelocities);
    }

    private async Task RefreshVelocity()
    {
        if (Sprint == null || Sprint.Url == null)
        {
            return;
        }

        MembersVelocities = new HashSet<MemberVelocity>();

        await foreach (var velocity in VelocityService.MemberVelocities(Sprint.Url, Capacities, Sprint, TeamDaysOff, TeamSettings, useCache: false))
        {
            MembersVelocities.Add(velocity);
            StateHasChanged();
        }
    }
}
