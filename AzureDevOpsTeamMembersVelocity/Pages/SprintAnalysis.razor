@page "/SprintAnalysis"
@inject NavigationManager NavManager
@inject VelocityService VelocityService

<h3>SprintAnalysis</h3>

@if (MembersVelocities != null)
{
    <table class="table table-striped table-hover table-responsive-md">
        <thead>
            <tr>
                <th>Person</th>
                <th>Hours of work done</th>
                <th>Estimated Capacity</th>
                <th>Real capacity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < MembersVelocities.Count; i++)
            {
                var updates = @MembersVelocities[i].Updates;

                <tr>
                    <td>@MembersVelocities[i].DisplayName</td>
                    <td>@MembersVelocities[i].HoursOfWorkDone</td>
                    <td>@MembersVelocities[i].CapacitySaved</td>
                    <td>@MembersVelocities[i].RealCapacity</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowUpdates(updates)">Show history</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div>
        <p>Loading ...</p>
    </div>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    public List<MemberVelocity> MembersVelocities { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sprints", out var sprintUrl))
        {
            MembersVelocities = await VelocityService.MemberVelocities(sprintUrl);
        }
    }

    private void ShowUpdates(List<WorkItemUpdate> updates)
    {
        var parameters = new ModalParameters();

        parameters.Add("Updates", updates);

        Modal.Show<PersonHistoryModal>("Update history", parameters);
    }
}
