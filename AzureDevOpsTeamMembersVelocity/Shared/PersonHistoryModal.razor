@inject IDialogService DialogService

@if (Updates != null)
{
    <MudTable Items="@Updates" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Task title</MudTh>
            <MudTh>Field update</MudTh>
            <MudTh>Remaining work</MudTh>
            <MudTh>Revised date</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.RelatedTaskTitle</MudTd>
            <MudTd>@Print(context.Fields?.MaybeGet("System.State"))</MudTd>
            <MudTd>@Print(context.Fields?.MaybeGet("Microsoft.VSTS.Scheduling.RemainingWork"))</MudTd>
            <MudTd>@context.RevisedDate</MudTd>
            <MudTh>
                <button @onclick="() => ShowJson(context.Url)">json</button>
            </MudTh>
        </RowTemplate>
    </MudTable>
}

@code {
    private IEnumerable<WorkItemUpdate>? _updates;

    [Parameter]
    public IEnumerable<WorkItemUpdate>? Updates
    {
        get
        {
            return _updates?.OrderBy(u => u);
        }
        set
        {
            _updates = value;
        }
    }

    private bool _loading;

    public string? Print(object? obj)
    {
        if (obj is Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.WorkItemFieldUpdate fieldUpdate)
        {
            return $"old: {fieldUpdate.OldValue}, new: {fieldUpdate.NewValue}";
        }

        return obj?.ToString();
    }

    public void ShowJson(string url)
    {
        var parameters = new DialogParameters();

        parameters.Add("Url", url);

        DialogService.Show<JsonModal>("Json view", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge
        });
    }
}