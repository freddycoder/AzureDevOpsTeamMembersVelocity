@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">TeamMembersVelocity</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            @if (ClaimsPrincipal?.Identity?.IsAuthenticated == true)
            {
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
                <hr />
                <NavLink class="nav-link" href="Logout">
                    <span class="oi oi-home" aria-hidden="true"></span> Logout
                </NavLink>
            }
            else
            {
                <NavLink class="nav-link" href="Login">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Login
                </NavLink>
            }

        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public ClaimsPrincipal? ClaimsPrincipal { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        ClaimsPrincipal = authState.User;
    }
}
